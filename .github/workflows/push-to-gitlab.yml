# Copied from https://github.com/chuanqisun/htmaa-2025/blob/master/.github/workflows/push-to-gitlab.yml
# Setup
# =====
# 1. Go to GitLab, generate a developer acccess token with `write_repository` scope. In the UI, it's in settings > access tokens.
# 2. Go to GitHub, add that token to your GitHub repo's secrets list
# 3. In GitLab, relax branch protection policy to allow direct push permission on the `main` branch by your user's role. In my case, the role is `Developer`, not `Maintainer`.
# 4. Edit this file, replace `SunChuanqi` with your GitLab username in two places, your commiter name and email with yours.
# 5. Adjust build script and deployment folder to match your static site generator. Mine is `public`.

name: Build and push to GitLab

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node.js version
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - name: npm
        # Customize build script here
        run: |
          npm install
          npm run build
      - name: Compress large assets
        run: |
          # Check if out/ directory exists
          if [ ! -d "out" ]; then
            echo "No output directory (out/) to compress, skipping compression steps."
            exit 0
          fi
          
          # Install compression tools
          sudo apt-get update
          sudo apt-get install -y ffmpeg imagemagick
          
          # Compress videos using web-optimized settings to stay under 25MB limit
          echo "Compressing large video files for web..."
          find out/ -name "*.mp4" -size +20M -exec bash -c '
            echo "Compressing: $1"
            original_size=$(stat -c%s "$1")
            
            # Use web-optimized H.264 encoding with variable bitrate
            # Scale down if needed and use efficient compression
            ffmpeg -i "$1" \
              -vcodec libx264 \
              -crf 28 \
              -preset medium \
              -vf "scale=-2:720" \
              -acodec libmp3lame \
              -q:a 4 \
              -ar 48000 \
              -ac 2 \
              -movflags +faststart \
              -y "$1.temp" 2>/dev/null || echo "Standard compression failed, trying aggressive..."
            
            # If standard compression failed or file still too large, try more aggressive
            if [ ! -f "$1.temp" ] || [ $(stat -c%s "$1.temp") -gt 26214400 ]; then
              rm -f "$1.temp"
              echo "  Trying aggressive compression..."
              ffmpeg -i "$1" \
                -vcodec libx264 \
                -b:v 800k \
                -vf "scale=-2:480" \
                -acodec libmp3lame \
                -b:a 128k \
                -ar 44100 \
                -ac 2 \
                -movflags +faststart \
                -y "$1.temp" 2>/dev/null || echo "Aggressive compression failed"
            fi
            
            # Check results and replace if successful
            if [ -f "$1.temp" ]; then
              new_size=$(stat -c%s "$1.temp")
              if [ "$new_size" -lt "$original_size" ] && [ "$new_size" -lt 26214400 ]; then
                mv "$1.temp" "$1"
                echo "  ✅ Reduced from $((original_size/1048576))MB to $((new_size/1048576))MB"
              else
                rm -f "$1.temp"
                echo "  ⚠️ Compression failed to get under 25MB limit"
              fi
            fi
          ' _ {} \;
          
          # Compress large images (>2MB) using ImageMagick
          echo "Compressing large images..."
          if [ -d "out" ]; then
            find out/ -name "*.jpg" -o -name "*.JPG" -o -name "*.jpeg" -o -name "*.JPEG" | while read img; do
            size=$(stat -c%s "$img")
            if [ "$size" -gt 2097152 ]; then  # 2MB
              echo "Compressing image: $img"
              convert "$img" -quality 80 -strip "$img.temp" 2>/dev/null || echo "Failed to compress $img"
              if [ -f "$img.temp" ]; then
                new_size=$(stat -c%s "$img.temp")
                if [ "$new_size" -lt "$size" ]; then
                  mv "$img.temp" "$img"
                  echo "  ✅ Reduced from $((size/1048576))MB to $((new_size/1048576))MB"
                else
                  rm -f "$img.temp"
                fi
              fi
            fi
          done
          
          # Final check for files still over 25MB
          echo "Final verification - checking for files over 25MB:"
          if [ -d "out" ]; then
            find out/ -type f -size +25M -exec ls -lh {} \; || echo "✅ No files over 25MB found"
          fi
      - name: Check out gitlab repo
        # Customize git clone url here
        run: |
          git clone https://HayleyBloch:${{ secrets.GITLAB_ACCESS_TOKEN }}@gitlab.cba.mit.edu/classes/863.25/people/HayleyBloch.git gitlab-repo
      - name: Push
        # Customize deployment folder here
        run: |
          # Copy built files to gitlab repo
          cp -r out/* gitlab-repo/
          cd gitlab-repo
          # Verify no files are over 25MB (should be handled by compression)
          echo "Verifying all files are under 25MB..."
          large_files=$(find . -type f -size +25M | wc -l)
          if [ "$large_files" -gt 0 ]; then
            echo "❌ Found files still over 25MB:"
            find . -type f -size +25M -exec ls -lh {} \;
            echo "Deployment may fail due to GitLab limits"
          else
            echo "✅ All files are under 25MB limit"
          fi
          
          git config --global user.name "Bloch, Hayley"
          git config --global user.email "hayelybl@mit.edu"
          git add .
          git commit -m "${{ github.event.head_commit.message }}" || echo "No changes to commit"
          git status
          git push origin main